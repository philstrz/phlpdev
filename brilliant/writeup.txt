I ended up spending about 9.5 hours on this. Around 7 hours in, I had a single sandbox interactive that couldn't be extended very easily, so I scrambled to refactor and made a mess of it. It took me another hour to redo it correctly and use that to generate a simple progression of 5 interactives. Then I spent another half-hour adding some exposition to the sequence and a few more comments to the code, so that hopefully both the interactives and the code that powers them are easier to understand. In reading the code, I would start with "setup.js" and "mirrorInteractive.js", which set up and drive the interactives, respectively. Object, Original, Image and Observer classes are all contained in "objects.js". The remaining classes (LineOfSight, Mirror, and VectorMath) have their own files. On to the write-up questions:

1. There are plenty of features that could be added. Currently, the interactive does not know if the object and observer are on the same side of the mirrors, or if the observer is past the edge of the mirror. I could try restricting the observer's field of view. There are no clear objectives, yet, just room to play with the elements. Even simple questions like, "How does the image move relative to the object?" could give the user better focus. An objective might be to place the object so its image appears in a particular place. The user could receive prompts e.g. text or some way to highlight elements that haven't been interacted with yet. It's hard to say which of these would have been better without implementing them.

2. In optics, the obvious topics this could be extended to are refraction and lenses. For now, the interactive uses vector arithmetic to reflect points, but refracting shouldn't be much more difficult. The line-of-sight logic could be used, with refractions, to create lens objects and project virtual images. Similarly, it would be interesting to draw nonlinear mirrors, like parabolic reflectors, and cast images as seen by an observer through those mirrors.

3. More generally, the interactive could be extended to collisions; reflecting light from a mirror is similar to an elastic collision with an infinitely massive body. It could be extended to all manner of transformations in two dimensions by creating new types of nodes; adding a way to convert to/from matrices would make it a useful tool in Linear Algebra.